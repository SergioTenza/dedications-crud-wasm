@page "/"
@page "/pages/authentication/login"
@layout LoginLayout
@inject ISnackbar Snackbar
@using System.Net.Http
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager



<MudText Typo="Typo.h4" GutterBottom="true" Align="Align.Center">Dedications API</MudText>
<MudText Typo="Typo.h6" GutterBottom="true">Inicia sesion</MudText>

<MudText>Aun no eres cliente? <MudLink Href="/pages/authentication/register">Contacta con nosotros</MudLink></MudText>

<MudTextField T="string" @bind-Value="model.Email" Label="E-mail" Variant="Variant.Outlined" Class="my-6"></MudTextField>

<MudTextField @bind-Value="model.Password" Label="Password" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />

<div Class="d-flex justify-space-between align-center">
    <MudCheckBox T="bool" Label="Recuerdame?" Color="Color.Primary" Class="ml-n1 my-3" @bind-Checked="@CheckBoxRememberMe" @onclick="@ToggleCheckBox"></MudCheckBox>
    <MudLink Href="/pages/authentication/forgot-password">Has olvidado tu password?</MudLink>
</div>


<MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" OnClick=@HandleValidSubmit FullWidth="true">@if (loading){<MudProgressCircular Color="Color.Default" Indeterminate="true"/>}Ingresa</MudButton>
@if (!string.IsNullOrEmpty(error)){Snackbar.Add(@error, Severity.Error);}

@code {
    string Password { get; set; } = "SamplePassWord";
    private bool loading;
    private string error;

    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    bool CheckBoxRememberMe { get; set; } = false;
    private Model model = new Model();

    protected override void OnInitialized()
    {
        // redirect to home if already logged in
        if (AuthenticationService.User != null)
        {
            NavigationManager.NavigateTo("/personal/dashboardadmin");
        }
    }
    private async void HandleValidSubmit()
    {
        loading = true;
        try
        {
            await AuthenticationService.Login(model.Email, model.Password);
            Snackbar.Add("login correcto",Severity.Success);
            loading = false;
            var returnUrl = NavigationManager.QueryString("returnUrl") ?? "/personal/dashboardadmin";            
            NavigationManager.NavigateTo(returnUrl);
                        
        }
        catch (Exception ex)
        {
            error = ex.Message;
            loading = false;
            StateHasChanged();
        }
    }

    void TogglePasswordVisibility()
    {
        if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
    void ToggleCheckBox()
    {
        if (CheckBoxRememberMe)
        {
            Snackbar.Add("Credenciales eliminados.", Severity.Error);
        }
        else
        {
            Snackbar.Add("Credenciales almacenados.", Severity.Success);
        }
    }
    private class Model
    {
        [Required]
        public string Email { get; set; }

        [Required]
        public string Password { get; set; }
    }
}
